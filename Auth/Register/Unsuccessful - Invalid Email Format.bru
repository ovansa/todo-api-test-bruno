meta {
  name: Unsuccessful - Invalid Email Format
  type: http
  seq: 3
}

post {
  url: {{BASE_URL}}/auth/register
  body: json
  auth: inherit
}

headers {
  accept: application/json
  Content-Type: application/json
}

body:json {
  {
    "email": "{{email}}",
    "fullName": "{{fullName}}",
    "password": "{{password}}"
  }
}

script:pre-request {
  const randomNumber = Math.floor(1000 + Math.random() * 9000);
  
  const firstNames = ['John', 'Jane', 'Alice', 'Bob', 'Diana'];
  const lastNames = ['Smith', 'Brown', 'Taylor', 'Lee', 'Johnson'];
  const fullName = `${firstNames[Math.floor(Math.random() * firstNames.length)]} ${lastNames[Math.floor(Math.random() * lastNames.length)]}`;
  
  const email = `invalidEmail`;
  const password = `Password123`;
  
  if (typeof bru !== 'undefined' && bru.setVar) {
    bru.setVar('email', email);
    bru.setVar('fullName', fullName);
    bru.setVar('password', password);
  } 
}

tests {
  test("Response should return status code 400", () => {
    expect(res.getStatus()).to.equal(400);
  });
  
  test("Response should include a code with value 'VALIDATION_ERROR'", () => {
    expect(res.getBody()).to.have.property("code").that.equals("VALIDATION_ERROR");
  });
  
  test("Response should include a message that describes the error", () => {
    expect(res.getBody()).to.have.property("message").that.equals("Email must be a valid email");
  });
}
